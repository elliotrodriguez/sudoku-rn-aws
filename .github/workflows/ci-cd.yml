name: React Native CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  # Manual trigger for debugging
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug mode'
        required: false
        default: false
        type: boolean

# Environment variables for the entire workflow
env:
  NODE_VERSION: '20.x'
  JAVA_VERSION: '21'

jobs:
  # Job 1: Code Quality & Testing
  test:
    name: 'Test & Lint'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Debug - Print environment info
      if: ${{ github.event.inputs.debug_enabled == 'true' }}
      run: |
        echo "üîç Debug mode enabled"
        echo "Node version: $(node --version)"
        echo "NPM version: $(npm --version)"
        echo "Working directory: $(pwd)"
        echo "Files in directory:"
        ls -la
        echo "Git branch: ${{ github.ref }}"
        echo "Git commit: ${{ github.sha }}"

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Debug - Verify package.json
      if: ${{ github.event.inputs.debug_enabled == 'true' }}
      run: |
        echo "üì¶ Package.json contents:"
        cat package.json
        echo "üîç React Native version:"
        npm list react-native || echo "React Native not found in package.json"

    - name: Install dependencies
      run: |
        npm ci
        # Verify key dependencies are installed
        npm list react-native @reduxjs/toolkit

    - name: Run TypeScript check
      run: npx tsc --noEmit

    - name: Run ESLint
      run: npx eslint . --ext .js,.jsx,.ts,.tsx --max-warnings 0

    - name: Run tests
      run: npm test -- --coverage --watchAll=false

    - name: Upload coverage to Codecov (optional)
      if: success()
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
# Job 2: Android Build
  android:
    name: 'Android Build'
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Debug - Android environment
      if: ${{ github.event.inputs.debug_enabled == 'true' }}
      run: |
        echo "ü§ñ Android environment:"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        echo "JAVA_HOME: $JAVA_HOME"
        echo "Java version: $(java -version 2>&1 || echo 'Java not found')"
        echo "Android directory structure:"
        ls -la android/ || echo "No android directory found"
        if [ -f android/build.gradle ]; then
          echo "Android build.gradle exists"
        else
          echo "‚ùå No android/build.gradle found"
        fi

    - name: Install dependencies
      run: npm ci

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make Gradlew executable
      run: chmod +x ./android/gradlew

    - name: Build Android APK (Debug)
      run: |
        cd android
        ./gradlew assembleDebug --no-daemon --stacktrace

    - name: Build Android APK (Release)
      if: github.ref == 'refs/heads/main'
      run: |
        cd android
        ./gradlew assembleRelease --no-daemon --stacktrace

    - name: Upload Android artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-apks
        path: |
          android/app/build/outputs/apk/debug/*.apk
          android/app/build/outputs/apk/release/*.apk
        retention-days: 5
# Job 3: iOS Build (Simulator only due to cert constraints)
  ios:
    name: 'iOS Build'
    runs-on: macos-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Cache CocoaPods
      uses: actions/cache@v3
      with:
        path: ios/Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-

    - name: Install CocoaPods dependencies
      run: |
        cd ios
        pod install --repo-update

    - name: Debug - iOS environment
      if: ${{ github.event.inputs.debug_enabled == 'true' }}
      run: |
        echo "üçé iOS environment:"
        echo "Xcode version:"
        xcodebuild -version || echo "Xcode not found"
        echo "iOS directory structure:"
        ls -la ios/ || echo "No ios directory found"
        if [ -f ios/SudokuAWS.xcworkspace ]; then
          echo "‚úÖ Workspace exists"
        else
          echo "‚ùå No workspace found, checking for project:"
          ls -la ios/*.xcodeproj || echo "No Xcode project found"
        fi
        echo "CocoaPods version:"
        pod --version || echo "CocoaPods not found"

    - name: Build iOS (Simulator)
      run: |
        cd ios
        xcodebuild -workspace SudokuAWS.xcworkspace \
          -scheme SudokuAWS \
          -configuration Debug \
          -destination 'platform=iOS Simulator,name=iPhone 15,OS=latest' \
          -derivedDataPath build \
          build

    - name: Archive iOS build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ios-simulator-build
        path: ios/build/Build/Products/Debug-iphonesimulator/
        retention-days: 5